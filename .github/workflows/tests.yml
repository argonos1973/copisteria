name: Tests & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,.venv,__pycache__,.git
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=15 --max-line-length=120 --statistics --exclude=venv,.venv,__pycache__,.git
    
    - name: Check code formatting with black
      run: |
        black --check --diff . --exclude='venv|.venv|__pycache__|.git'
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . --skip venv --skip .venv
      continue-on-error: true
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing --cov-report=html --maxfail=5 -n auto
      env:
        TESTING: 1
        FLASK_ENV: testing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      if: matrix.python-version == '3.12'
    
    - name: Generate coverage badge
      run: |
        coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
        coverage_pct=$(python -c "print(f'{float($coverage)*100:.1f}')")
        echo "Coverage: ${coverage_pct}%"
        echo "COVERAGE=${coverage_pct}" >> $GITHUB_ENV
      if: matrix.python-version == '3.12'
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
      if: matrix.python-version == '3.12'
    
    - name: Comment PR with coverage
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 15
        MINIMUM_ORANGE: 10
      if: github.event_name == 'pull_request' && matrix.python-version == '3.12'
      continue-on-error: true

  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint mypy bandit safety
    
    - name: Security check with bandit
      run: |
        bandit -r . -x ./venv,./tests -ll
      continue-on-error: true
    
    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check --json
      continue-on-error: true
    
    - name: Static type checking with mypy
      run: |
        mypy . --ignore-missing-imports --exclude 'venv|.venv'
      continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image (test)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: aleph70:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
      if: hashFiles('Dockerfile') != ''
