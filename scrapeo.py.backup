with open("/var/www/html/scrapeo_test.log", "a") as f:
    f.write("scrapeo.py iniciado\n")

from playwright.sync_api import sync_playwright
from datetime import datetime
import time
import os
import sys
from db_utils import get_db_connection

MAX_LOGIN_TIME = 60  # segundos
nif = "44007535W"
clave = "19731898"

fecha_inicio = datetime.now().replace(day=1).strftime("%d/%m/%Y")
#fecha_inicio = "01/01/2025"
fecha_hoy = datetime.now().strftime("%d/%m/%Y")

# Guardar mes y año del filtro para comparación posterior
mes_filtro = int(fecha_inicio[3:5])
anio_filtro = int(fecha_inicio[6:10])
mes_anio = f"{str(mes_filtro).zfill(2)}/{anio_filtro}"

with sync_playwright() as p:
    import pathlib
    downloads_dir = "/var/www/html/descargas"
    pathlib.Path(downloads_dir).mkdir(parents=True, exist_ok=True)
    browser = p.chromium.launch(headless=False)
    context = browser.new_context(accept_downloads=True)
    page = context.new_page()

    print("→ Abriendo página...")
    page.goto("https://particulares.bancosantander.es/login/")
    login_start = time.time()

    # Aceptar cookies
    try:
        page.locator("#onetrust-accept-btn-handler").click(timeout=3000)
    except:
        pass
    if time.time() - login_start > MAX_LOGIN_TIME:
        print("Demasiado tiempo intentando hacer login. Reiniciando script...")
        python = sys.executable
        os.execl(python, python, *sys.argv)

    # Rellenar NIF
    page.wait_for_selector("#inputDocuNumber", timeout=10000)
    page.fill("#inputDocuNumber", nif)
    if time.time() - login_start > MAX_LOGIN_TIME:
        print("Demasiado tiempo intentando hacer login. Reiniciando script...")
        python = sys.executable
        os.execl(python, python, *sys.argv)

    # Esperar campos clave y rellenar solo los visibles
    page.wait_for_selector("#inputPW0", timeout=10000)
    for i in range(8):
        sel = f"#inputPW{i}"
        el = page.query_selector(sel)
        if el and el.is_visible() and el.is_enabled():
            page.click(sel)
            page.type(sel, clave[i])
        if time.time() - login_start > MAX_LOGIN_TIME:
            print("Demasiado tiempo intentando hacer login. Reiniciando script...")
            python = sys.executable
            os.execl(python, python, *sys.argv)

    # Pulsar botón Entrar
    page.locator("button:has-text('Entrar')").click()
    if time.time() - login_start > MAX_LOGIN_TIME:
        print("Demasiado tiempo intentando hacer login. Reiniciando script...")
        python = sys.executable
        os.execl(python, python, *sys.argv)

    # Cerrar ventana emergente si aparece
    try:
        page.locator("#mcp-cross-close").click(timeout=5000)
    except:
        pass

    # Ir a la página de movimientos
    page.wait_for_timeout(3000)
    page.goto("https://particulares.bancosantander.es/nhb/#/cuentas/detalle")

    # Intentar cerrar modal de filtros si aparece
    try:
        cerrar_btn = page.locator(".c-sanicon__close")
        if cerrar_btn.count() > 0 and cerrar_btn.first.is_visible():
            cerrar_btn.first.click()
    except Exception as e:
        print("No se pudo cerrar el modal de filtros (puede que no esté visible):", e)

    # Depuración: buscar y clicar el botón de filtros
    try:
        botones = page.locator("button.c-button__line:has(div.c-button__wrapper:has-text('Buscar'))")
        print("Botones encontrados:", botones.count())
        for i in range(botones.count()):
            visible = botones.nth(i).is_visible()
            print(f"Botón {i} visible: {visible}")
        # Intentar click normal
        if botones.count() > 0 and botones.first.is_visible():
            print("Intentando click normal...")
            botones.first.click()
        else:
            print("No hay botón visible, probando click forzado...")
            botones.first.click(force=True)
    except Exception as e:
        print("No se pudo hacer click en el botón Buscar (desplegar filtros):", e)

    # Esperar un poco para que se despliegue la zona de filtros
    page.wait_for_timeout(2000)

    # Ahora sí, esperar y rellenar los campos de fecha
    page.wait_for_selector("#filterComponent-input2")
    page.fill("#filterComponent-input2", fecha_inicio)
    page.fill("#filterComponent-input3", fecha_hoy)

    # Hacer click en el botón Buscar
    print("Haciendo click en el botón Buscar...")
    buscar_btn = page.locator('button:has-text("BUSCAR")')
    buscar_btn.click()
    print("Click realizado en el botón Buscar. Esperando resultados...")
    page.wait_for_timeout(3000)

    # Hacer click en el icono de descarga
    print("Buscando icono de descarga...")
    try:
        download_icon = page.locator('.c-sanicon__download').first
        if download_icon.is_visible():
            print("Clickando en el icono de descarga...")
            download_icon.click()
            print("Click realizado en el icono de descarga.")
            print("Esperando 5 segundos tras el click de descarga...")
            page.wait_for_timeout(5000)
            # Hacer click en el botón Exportar Excel
            print("Buscando botón 'Exportar Excel'...")
            try:
                exportar_excel_btn = page.locator('#exportModal-a1').first
                if exportar_excel_btn.is_visible():
                    print("Clickando en el botón 'Exportar Excel'...")
                    exportar_excel_btn.click()
                    print("Click realizado en 'Exportar Excel'. Esperando 5 segundos...")
                    page.wait_for_timeout(5000)
                    # Hacer click en el enlace 'Descargar EXCEL'
                    print("Buscando enlace 'Descargar EXCEL'...")
                    try:
                        descargar_excel_link = page.locator('#blobButtons-a10').first
                        if descargar_excel_link.is_visible():
                            print("Clickando en el enlace 'Descargar EXCEL'...")
                            print("Preparando para capturar la descarga...")
                            with page.expect_download() as download_info:
                                descargar_excel_link.click()
                            download = download_info.value
                            import pathlib
                            downloads_dir = "/var/www/html/descargas"
                            pathlib.Path(downloads_dir).mkdir(parents=True, exist_ok=True)
                            destino = f"{downloads_dir}/descarga.xlsx"
                            download.save_as(destino)
                            print(f"Archivo XLS guardado en: {destino}")
                            print("Descarga completada.")

                            # Leer el Excel sin encabezado para inspeccionar la estructura real
                            import pandas as pd
                            import sqlite3
                            import os
                            try:
                                ext = os.path.splitext(destino)[1].lower()
                                if ext == ".xls":
                                    df = pd.read_excel(destino, header=7, engine="xlrd")
                                else:
                                    df = pd.read_excel(destino, header=7)
                                print(f"Columnas detectadas en el Excel: {list(df.columns)}")
                                print("Primeras filas del Excel:")
                                print(df.head())
                                columnas = ['FECHA OPERACIÓN', 'FECHA VALOR', 'CONCEPTO', 'IMPORTE EUR', 'SALDO']
                                for col in columnas:
                                    if col not in df.columns:
                                        raise Exception(f"No se encuentra la columna requerida: {col}")
                                # Renombrar las columnas al formato de la tabla gastos
                                df = df.rename(columns={
                                    'FECHA OPERACIÓN': 'fecha_operacion',
                                    'FECHA VALOR': 'fecha_valor',
                                    'CONCEPTO': 'concepto',
                                    'IMPORTE EUR': 'importe_eur',
                                    'SALDO': 'saldo'
                                })
                                # Seleccionar solo las columnas necesarias para la tabla
                                default_saldo = None
                                if 'saldo' not in df.columns:
                                    df['saldo'] = default_saldo
                                # Seleccionar columnas base primero
                                df = df[['fecha_operacion', 'fecha_valor', 'concepto', 'importe_eur', 'saldo']]

                                # Borrar registros del mes y año en curso antes de insertar
                                ahora = datetime.now()
                                mes_actual = ahora.month
                                anio_actual = ahora.year
                                conn = get_db_connection()
                                cursor = conn.cursor()
                                # Borrado robusto para fechas en formato DD/MM/YYYY
                                patron = f"%/{mes_actual:02d}/{anio_actual}"
                                cursor.execute("DELETE FROM gastos WHERE fecha_operacion LIKE ?", (patron,))
                                conn.commit()
                                print(f"Registros del mes {mes_actual:02d}/{anio_actual} eliminados antes de la inserción.")
                                # Añadir columna TS (en mayúsculas) con el timestamp más reciente posible y ejercicio (año en curso)
                                timestamp_reciente = datetime.now().isoformat()
                                print(f"Asignando timestamp de actualización: {timestamp_reciente}")
                                # Usar TS en mayúsculas para coincidir con el nombre en la base de datos
                                df['TS'] = timestamp_reciente
                                df['ejercicio'] = anio_actual
                                # Ahora sí, selecciona todas las columnas para la inserción
                                df = df[['fecha_operacion', 'fecha_valor', 'concepto', 'importe_eur', 'saldo', 'ejercicio', 'TS']]

                                try:
                                    # Insertar los datos en la tabla 'gastos'
                                    df.to_sql('gastos', conn, if_exists='append', index=False)
                                    print("Gastos insertados correctamente en la base de datos aleph70.db (tabla gastos)")
                                except Exception as e:
                                    print(f"Error al insertar los gastos en la base de datos: {e}")
                                finally:
                                    conn.close()
                            except Exception as e:
                                print(f"Error al procesar el Excel: {e}")
                    except Exception as e:
                        print(f"Error al buscar o hacer click en el enlace 'Descargar EXCEL': {e}")
            except Exception as e:
                print(f"Error al buscar o hacer click en el botón 'Exportar Excel': {e}")
    except Exception as e:
        print(f"Error al buscar o hacer click en el icono de descarga: {e}")
    else:
        print("No se encontró el icono de descarga visible.")

    browser.close()
