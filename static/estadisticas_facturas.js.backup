document.addEventListener('DOMContentLoaded', function() {
    // Establecer valor inicial del selector al mes actual si no está establecido
    const selectorFecha = document.getElementById('selector-fecha');
    if (selectorFecha) {
        if (!selectorFecha.value) {
            const hoy = new Date();
            selectorFecha.value = hoy.toISOString().slice(0, 7); // YYYY-MM
        }
        selectorFecha.addEventListener('change', recargarEstadisticas);

    // Vincular botón de descarga CSV
    const btnCSV = document.getElementById('btn-descargar-csv');
    if (btnCSV) {
        btnCSV.addEventListener('click', descargarCSV);
    }
    const btnGraficos = document.getElementById('btn-graficos');
    if (btnGraficos) {
        btnGraficos.addEventListener('click', abrirModalGraficos);
    }

    

    }
    console.log('Cargando estadísticas...');
    // Habilitar arrastre de la modal de gráficos
    initModalDrag();
    recargarEstadisticas();
});

document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
        recargarEstadisticas();
    }
});

// Función para cargar los KPIs de gastos (extracto bancario)
async function cargarKpiGastos(mes = null, anio = null) {
    try {
        const params = new URLSearchParams();
        if (mes) params.append('mes', mes);
        if (anio) params.append('anio', anio);
        params.append('t', Date.now());
        const url = '/api/estadisticas_gastos?' + params.toString();
        const data = await fetchConManejadorErrores(url);
        // Solo mostrar los KPIs del mes actual
        const ingresosMes = parsearImporte(data.ingresos_mes_actual);
        const gastosMes = parsearImporte(data.gastos_mes_actual);
        const ingresosElem = document.getElementById('kpi-ingresos-mes-actual');
        const gastosElem = document.getElementById('kpi-gastos-mes-actual');
        const balanceElem = document.getElementById('kpi-balance-mes-actual');

        ingresosElem.textContent = formatearImporte(ingresosMes);
        gastosElem.textContent = formatearImporte(gastosMes);
        balanceElem.textContent = formatearImporte(data.balance_mes_actual);

        // Mostrar saldo final mes actual
        const saldoElem = document.getElementById('kpi-saldo-mes-actual');
        if (saldoElem) {
            saldoElem.textContent = data.saldo_mes_actual !== null && data.saldo_mes_actual !== undefined ? formatearImporte(parsearImporte(data.saldo_mes_actual)) : '-';
            saldoElem.classList.remove('valor-positivo', 'valor-negativo');
            if (parsearImporte(data.saldo_mes_actual) >= 0) {
                saldoElem.classList.add('valor-positivo');
            } else {
                saldoElem.classList.add('valor-negativo');
            }
        }
        // Mostrar fecha/hora de última actualización
        const actualizacionElem = document.getElementById('kpi-ultima-actualizacion');
        if (actualizacionElem) {
            if (data.ultima_actualizacion) {
                // Formatear fecha legible para humanos
                const dt = new Date(data.ultima_actualizacion);
                if (!isNaN(dt)) {
                    const opciones = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' };
                    actualizacionElem.textContent = dt.toLocaleString('es-ES', opciones);
                } else {
                    actualizacionElem.textContent = data.ultima_actualizacion;
                }
            } else {
                actualizacionElem.textContent = '-';
            }
        }

        // Botón gráficos
        const btnGraficos = document.getElementById('btn-graficos');
        if (btnGraficos) {
            btnGraficos.addEventListener('click', abrirModalGraficos);
        }

        // Colorea según valor
        ingresosElem.classList.remove('valor-positivo', 'valor-negativo');
        gastosElem.classList.remove('valor-positivo', 'valor-negativo');
        balanceElem.classList.remove('valor-positivo', 'valor-negativo');

        if (ingresosMes >= 0) {
            ingresosElem.classList.add('valor-positivo');
        } else {
            ingresosElem.classList.add('valor-negativo');
        }
        if (gastosMes < 0) {
            gastosElem.classList.add('valor-negativo');
        } else {
            gastosElem.classList.add('valor-positivo');
        }
        if (data.balance_mes_actual >= 0) {
            balanceElem.classList.add('valor-positivo');
        } else {
            balanceElem.classList.add('valor-negativo');
        }
    } catch (e) {
        document.getElementById('kpi-ingresos-mes-actual').textContent = '-';
        document.getElementById('kpi-gastos-mes-actual').textContent = '-';
        document.getElementById('kpi-balance-mes-actual').textContent = '-';
    }
}



async function cargarEstadisticas(mes = null, anio = null) {
    try {
        // Cargar estadísticas por documento
        const qp = new URLSearchParams();
        if (mes) qp.append('mes', mes);
        if (anio) qp.append('anio', anio);
        const datosDocumentos = await fetchConManejadorErrores('/api/ventas/media_por_documento?' + qp.toString());
        console.log('Datos recibidos:', JSON.stringify(datosDocumentos));
        // Cargar top clientes con más ventas
        const datosClientes = await fetchConManejadorErrores('/api/clientes/top_ventas?' + qp.toString());
        // Cargar top proformas con más ventas
        actualizarEstadisticasDocumentos(datosDocumentos);
        actualizarTopClientes(datosClientes);
        
        try {
            // Cargar top productos con más ventas
            const datosProductos = await fetchConManejadorErrores('/api/productos/top_ventas?' + qp.toString());
            console.log('Datos productos recibidos:', JSON.stringify(datosProductos));
            actualizarTopProductos(datosProductos);
        } catch (errorProductos) {
            console.error('Error al cargar top productos:', errorProductos);
            // Mostrar mensaje de error en la tabla de productos
            mostrarErrorProductos();
        }
    } catch (error) {
        console.error('Error al cargar estadísticas:', error);
        mostrarNotificacion('Error al cargar las estadísticas', 'error');
    }
}

// Parser robusto para importes: convierte strings tipo "2.814,89" o "2814,89" a número JS correcto
function parsearImporte(valor) {
    if (typeof valor === 'number') return valor;
    if (typeof valor === 'string') {
        // Quitar puntos de miles y cambiar coma decimal por punto
        const limpio = valor.replace(/\./g, '').replace(',', '.');
        const num = Number(limpio);
        return isNaN(num) ? 0 : num;
    }
    return 0;
}

function actualizarEstadisticasDocumentos(datos) {
    console.log('Actualizando estadísticas con datos:', JSON.stringify(datos));
    
    // Actualizar estadísticas de tickets
    const tickets = datos.tickets;
    document.getElementById('ticketsTotal').textContent = formatearImporte(parsearImporte(tickets.actual.total));
    document.getElementById('ticketsMedia').textContent = formatearImporte(parsearImporte(tickets.actual.media));
    document.getElementById('ticketsMediaMensual').textContent = formatearImporte(parsearImporte(tickets.actual.media_mensual));
    document.getElementById('ticketsCantidad').textContent = tickets.actual.cantidad;
    document.getElementById('ticketsAnterior').textContent = `Año anterior: ${formatearImporte(parsearImporte(tickets.anterior.total))}`;
    actualizarPorcentaje('ticketsPorcentaje', tickets.porcentaje_diferencia);

    if (
        tickets.actual.mes_actual &&
        tickets.actual.mes_actual.cantidad > 0
    ) {
        document.getElementById('ticketsTotalMes').textContent = formatearImporte(parsearImporte(tickets.actual.mes_actual.total));
        document.getElementById('ticketsMesAnterior').textContent = `Mismo mes año anterior: ${formatearImporte(parsearImporte(tickets.anterior.mismo_mes.total))}`;
        actualizarPorcentaje('ticketsPorcentajeMes', tickets.porcentaje_diferencia_mes);
        
        // Calcular y mostrar porcentaje faltante o superado para media mensual (tickets)
        actualizarPorcentajeFaltaMediaMensual('ticketsFaltaMediaMensual', 'ticketsPorcentajeFalta', 
                                            parsearImporte(tickets.actual.mes_actual.total), parsearImporte(tickets.actual.media_mensual), 'card-tickets');
    } else {
        document.getElementById('ticketsTotalMes').textContent = "Sin datos";
        document.getElementById('ticketsMesAnterior').textContent = "Sin datos históricos";
        document.getElementById('ticketsPorcentajeMes').textContent = "N/A";
        document.getElementById('ticketsFaltaMediaMensual').textContent = "N/A";
        document.getElementById('ticketsPorcentajeFalta').textContent = "N/A";
    }

    // Actualizar estadísticas de facturas
    const facturas = datos.facturas;
    document.getElementById('facturasTotal').textContent = formatearImporte(parsearImporte(facturas.actual.total));
    document.getElementById('facturasMedia').textContent = formatearImporte(parsearImporte(facturas.actual.media));
    document.getElementById('facturasMediaMensual').textContent = formatearImporte(parsearImporte(facturas.actual.media_mensual));
    document.getElementById('facturasCantidad').textContent = facturas.actual.cantidad;
    document.getElementById('facturasAnterior').textContent = `Año anterior: ${formatearImporte(parsearImporte(facturas.anterior.total))}`;
    actualizarPorcentaje('facturasPorcentaje', facturas.porcentaje_diferencia);

    if (
        facturas.actual.mes_actual &&
        facturas.actual.mes_actual.cantidad > 0
    ) {
        document.getElementById('facturasTotalMes').textContent = formatearImporte(parsearImporte(facturas.actual.mes_actual.total));
        document.getElementById('facturasMesAnterior').textContent = `Mismo mes año anterior: ${formatearImporte(parsearImporte(facturas.anterior.mismo_mes.total))}`;
        actualizarPorcentaje('facturasPorcentajeMes', facturas.porcentaje_diferencia_mes);
        
        // Calcular y mostrar porcentaje faltante o superado para media mensual (facturas)
        actualizarPorcentajeFaltaMediaMensual('facturasFaltaMediaMensual', 'facturasPorcentajeFalta', 
                                            parsearImporte(facturas.actual.mes_actual.total), parsearImporte(facturas.actual.media_mensual), 'card-facturas');
    } else {
        document.getElementById('facturasTotalMes').textContent = "Sin datos";
        document.getElementById('facturasMesAnterior').textContent = "Sin datos históricos";
        document.getElementById('facturasPorcentajeMes').textContent = "N/A";
        document.getElementById('facturasFaltaMediaMensual').textContent = "N/A";
        document.getElementById('facturasPorcentajeFalta').textContent = "N/A";
    }

    const proformas = datos.proformas;
    document.getElementById('proformasTotal').textContent = formatearImporte(parsearImporte(proformas.actual.total));
    document.getElementById('proformasMedia').textContent = formatearImporte(parsearImporte(proformas.actual.media));
    document.getElementById('proformasMediaMensual').textContent = formatearImporte(parsearImporte(proformas.actual.media_mensual));
    document.getElementById('proformasCantidad').textContent = proformas.actual.cantidad;
    document.getElementById('proformasAnterior').textContent = `Año anterior: ${formatearImporte(parsearImporte(proformas.anterior.total))}`;
    actualizarPorcentaje('proformasPorcentaje', proformas.porcentaje_diferencia);
    
    // En las proformas no mostramos datos del mes actual por requisito del usuario
    // Actualizar el porcentaje que falta para alcanzar la media mensual directamente
    actualizarPorcentajeFaltaMediaMensual('proformasFaltaMediaMensual', 'proformasPorcentajeFalta', 
                                        parsearImporte(proformas.actual.total) / 12, parsearImporte(proformas.actual.media_mensual));

    // Actualizar estadísticas globales (si existen)
    if (
        datos.global &&
        datos.global.actual &&
        datos.global.actual.cantidad > 0
    ) {
        const global = datos.global;
        document.getElementById('globalTotal').textContent = formatearImporte(parsearImporte(global.actual.total));
        document.getElementById('globalMedia').textContent = formatearImporte(parsearImporte(global.actual.media));
        document.getElementById('globalMediaMensual').textContent = formatearImporte(parsearImporte(global.actual.media_mensual));
        // Calcular el total previsto para el año usando el total actual más la proyección de meses restantes
        const mediaMensualGlobal = parsearImporte(global.actual.media_mensual);
        const mesActual = new Date().getMonth() + 1; // Los meses en JS van de 0-11
        const totalActualAcumulado = parsearImporte(global.actual.total);
        
        // Usamos el total ya acumulado más la proyección de los meses que quedan
        // Si estamos en diciembre (mes 12) no proyectamos
        const mesesRestantes = (mesActual < 12) ? (12 - mesActual) : 0;
        const totalPrevistoAnyo = totalActualAcumulado + (mediaMensualGlobal * mesesRestantes);
        document.getElementById('globalTotalPrevisto').textContent = formatearImporte(totalPrevistoAnyo);
        
        // Calcular el porcentaje de progreso hacia el objetivo anual
        const totalActual = parsearImporte(global.actual.total);
        const porcentajeProgreso = (totalActual / totalPrevistoAnyo) * 100;
        const porcentajeElemento = document.getElementById('globalPorcentajePrevistoAnyo');
        
        if (totalPrevistoAnyo > 0) {
            if (totalActual >= totalPrevistoAnyo) {
                // Ya hemos superado el objetivo
                const exceso = ((totalActual / totalPrevistoAnyo) * 100) - 100;
                porcentajeElemento.textContent = `+${exceso.toFixed(1)}%`;
                porcentajeElemento.className = 'stats-percentage positive';
            } else {
                // Aún no hemos llegado al objetivo
                const falta = 100 - ((totalActual / totalPrevistoAnyo) * 100);
                porcentajeElemento.textContent = `-${falta.toFixed(1)}%`;
                porcentajeElemento.className = 'stats-percentage negative';
            }
        } else {
            porcentajeElemento.textContent = "0%";
            porcentajeElemento.className = 'stats-percentage';
        }
        document.getElementById('globalCantidad').textContent = global.actual.cantidad;
        document.getElementById('globalAnterior').textContent = `Año anterior: ${formatearImporte(parsearImporte(global.anterior.total))}`;
        actualizarPorcentaje('globalPorcentaje', global.porcentaje_diferencia);
        // Solo mostramos los datos del mes actual si hay documentos en el mes actual
        if (global.actual.mes_actual && global.actual.mes_actual.cantidad > 0) {
            document.getElementById('globalTotalMes').textContent = formatearImporte(parsearImporte(global.actual.mes_actual.total));
            document.getElementById('globalMesAnterior').textContent = `Mismo mes año anterior: ${formatearImporte(parsearImporte(global.anterior.mismo_mes.total))}`;
            actualizarPorcentaje('globalPorcentajeMes', global.porcentaje_diferencia_mes);
            actualizarPorcentajeFaltaMediaMensual('globalFaltaMediaMensual', 'globalPorcentajeFalta', 
                parsearImporte(global.actual.mes_actual.total), parsearImporte(global.actual.media_mensual), 'card-global');
        } else {
            document.getElementById('globalTotalMes').textContent = "Sin datos";
            document.getElementById('globalMesAnterior').textContent = "Sin datos históricos";
            document.getElementById('globalPorcentajeMes').textContent = "N/A";
            document.getElementById('globalFaltaMediaMensual').textContent = "N/A";
            document.getElementById('globalPorcentajeFalta').textContent = "N/A";
        }
    } else if (datos.global) {
        document.getElementById('globalTotal').textContent = "Sin datos";
        document.getElementById('globalMedia').textContent = "Sin datos";
        document.getElementById('globalMediaMensual').textContent = "Sin datos";
        document.getElementById('globalTotalPrevisto').textContent = "Sin datos";
        document.getElementById('globalPorcentajePrevistoAnyo').textContent = "N/A";
        document.getElementById('globalPorcentajePrevistoAnyo').className = 'stats-percentage';
        document.getElementById('globalCantidad').textContent = "Sin datos";
        document.getElementById('globalAnterior').textContent = "Sin datos históricos";
        document.getElementById('globalPorcentaje').textContent = "N/A";
        document.getElementById('globalTotalMes').textContent = "Sin datos";
        document.getElementById('globalMesAnterior').textContent = "Sin datos históricos";
        document.getElementById('globalPorcentajeMes').textContent = "N/A";
        document.getElementById('globalFaltaMediaMensual').textContent = "N/A";
        document.getElementById('globalPorcentajeFalta').textContent = "N/A";
    }
}

function actualizarPorcentaje(elementId, porcentaje) {
    const elemento = document.getElementById(elementId);
    if (!elemento) return;
    
    if (porcentaje === null || porcentaje === undefined || isNaN(porcentaje)) {
        elemento.textContent = "N/A";
        elemento.className = 'stats-percentage';
        return;
    }
    
    const valor = parseFloat(porcentaje) || 0;  // Manejar NaN
    
    elemento.textContent = formatearPorcentaje(valor);
    elemento.className = 'stats-percentage ' + (valor >= 0 ? 'positive' : 'negative');
}

function formatearPorcentaje(valor) {
    const valorNumerico = parseFloat(valor) || 0;
    const signo = valorNumerico >= 0 ? '+' : '';
    return `${signo}${valorNumerico.toFixed(1)}%`;
}

function actualizarTopClientes(datos) {
    console.log('Actualizando top clientes con datos:', JSON.stringify(datos));
    const tbody = document.getElementById('topClientesBody');
    tbody.innerHTML = '';

    datos.clientes.forEach(cliente => {
        const row = document.createElement('tr');
        
        // Acortar el nombre del cliente si es muy largo
        let nombreCliente = cliente.nombre;
        if (nombreCliente.length > 15) {
            nombreCliente = nombreCliente.substring(0, 13) + '...';
        }
        
        row.innerHTML = `
            <td title="${cliente.nombre}">${nombreCliente}</td>
            <td>${formatearImporte(parsearImporte(cliente.total_actual))}</td>
            <td class="${cliente.porcentaje_diferencia >= 0 ? 'positive' : 'negative'}">${formatearPorcentaje(cliente.porcentaje_diferencia)}</td>
        `;
        tbody.appendChild(row);
    });

    // Si no hay clientes, mostrar mensaje
    if (datos.clientes.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `<td colspan="3" style="text-align: center;">No hay datos disponibles</td>`;
        tbody.appendChild(row);
    }
}

function actualizarTopProductos(datos) {
    console.log('Actualizando top productos con datos:', JSON.stringify(datos));
    const tbody = document.getElementById('topProductosBody');
    tbody.innerHTML = '';

    datos.productos.forEach(producto => {
        const row = document.createElement('tr');
        
        // Acortar el nombre del producto si es muy largo
        let nombreProducto = producto.nombre;
        if (nombreProducto.length > 12) {
            nombreProducto = nombreProducto.substring(0, 10) + '...';
        }
        
        row.innerHTML = `
            <td title="${producto.nombre}">${nombreProducto}</td>
            <td>${producto.cantidad_actual}</td>
            <td>${formatearImporte(parsearImporte(producto.total_actual))}</td>
            <td class="${producto.porcentaje_diferencia >= 0 ? 'positive' : 'negative'}">${formatearPorcentaje(producto.porcentaje_diferencia)}</td>
        `;
        tbody.appendChild(row);
    });

    // Si no hay productos, mostrar mensaje
    if (datos.productos.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `<td colspan="4" style="text-align: center;">No hay datos disponibles</td>`;
        tbody.appendChild(row);
    }
}

function mostrarErrorProductos() {
    const tbody = document.getElementById('topProductosBody');
    tbody.innerHTML = '';
    
    const row = document.createElement('tr');
    row.innerHTML = `<td colspan="4" style="text-align: center;">No se pudieron cargar los datos de productos</td>`;
    tbody.appendChild(row);
}

/**
 * Función para calcular y mostrar el porcentaje que falta o que se ha superado respecto a la media mensual
 * Si se supera la media, resalta visualmente el bloque y muestra el porcentaje en verde y mensaje especial
 * @param {string} elementoValorId - ID del elemento donde mostrar el valor
 * @param {string} elementoPorcentajeId - ID del elemento donde mostrar el porcentaje
 * @param {number} totalMesActual - Total del mes actual
 * @param {number} mediaMensual - Media mensual de la entidad
 * @param {string} cardId - ID del card a resaltar si se supera la media
 */
function actualizarPorcentajeFaltaMediaMensual(elementoValorId, elementoPorcentajeId, totalMesActual, mediaMensual, cardId = null) {
    const elementoValor = document.getElementById(elementoValorId);
    const elementoPorcentaje = document.getElementById(elementoPorcentajeId);
    let card = cardId ? document.getElementById(cardId) : null;

    // Limpiar estilos previos
    if (card) {
        card.classList.remove('stats-superado');
    }

    if (!mediaMensual || isNaN(mediaMensual) || mediaMensual === 0) {
        elementoValor.textContent = formatearImporte(0);
        elementoPorcentaje.textContent = "0%";
        elementoPorcentaje.className = 'stats-percentage positive';
        if (card) card.classList.remove('stats-superado');
        return;
    }

    const diferencia = mediaMensual - totalMesActual;
    if (diferencia > 0) {
        // Falta para llegar a la media
        const porcentajeFalta = (diferencia / mediaMensual) * 100;
        elementoValor.textContent = formatearImporte(diferencia);
        elementoPorcentaje.textContent = `${porcentajeFalta.toFixed(1)}%`;
        elementoPorcentaje.className = 'stats-percentage negative';
        if (card) card.classList.remove('stats-superado');
    } else {
        // Se ha superado la media
        const superado = Math.abs(diferencia);
        const porcentajeSuperado = (superado / mediaMensual) * 100;
        elementoValor.textContent = `¡Superado en ${porcentajeSuperado.toFixed(1)}%!`;
        elementoPorcentaje.textContent = `¡Superado en ${porcentajeSuperado.toFixed(1)}%!`;
        elementoPorcentaje.className = 'stats-percentage positive';
        if (card) card.classList.add('stats-superado');
    }
}

function getFechaSeleccionada() {
    const selectorFecha = document.getElementById('selector-fecha');
    if (selectorFecha && selectorFecha.value) {
        const [anio, mes] = selectorFecha.value.split('-');
        return { mes, anio };
    }
    const hoy = new Date();
    return { mes: String(hoy.getMonth() + 1).padStart(2, '0'), anio: String(hoy.getFullYear()) };
}

function recargarEstadisticas() {
    const yearSpan = document.getElementById('year-indicator');
    const { mes, anio } = getFechaSeleccionada();
    if (yearSpan) yearSpan.textContent = `(${anio})`;
    cargarEstadisticas(mes, anio);
    cargarKpiGastos(mes, anio);
} 

// -----------------------------
// Funcion para generar y descargar CSV
// -----------------------------
async function descargarCSV() {
    try {
        const selectorFecha = document.getElementById('selector-fecha');
        const anioSeleccionado = selectorFecha && selectorFecha.value ? selectorFecha.value.split('-')[0] : String(new Date().getFullYear());
        const mesesInfo = [
            {num:'01', name:'Enero'}, {num:'02', name:'Febrero'}, {num:'03', name:'Marzo'}, {num:'04', name:'Abril'},
            {num:'05', name:'Mayo'}, {num:'06', name:'Junio'}, {num:'07', name:'Julio'}, {num:'08', name:'Agosto'},
            {num:'09', name:'Septiembre'}, {num:'10', name:'Octubre'}, {num:'11', name:'Noviembre'}, {num:'12', name:'Diciembre'}
        ];

        // Obtener totales de un solo endpoint que devuelve todos los meses
        const params = new URLSearchParams({ anio: anioSeleccionado });
        params.append('t', Date.now());
        const datosTotales = await fetchConManejadorErrores('/api/ventas/total_mes?' + params.toString());

        const nombresMeses = mesesInfo.map(m => m.name);
        const tickets = nombresMeses.map((_, idx) => {
            const key = mesesInfo[idx].num;
            return parsearImporte(datosTotales.tickets[key]);
        });
        const facturas = nombresMeses.map((_, idx) => {
            const key = mesesInfo[idx].num;
            return parsearImporte(datosTotales.facturas[key]);
        });
        const globales = nombresMeses.map((_, idx) => {
            const key = mesesInfo[idx].num;
            return parsearImporte(datosTotales.global[key]);
        });

        const totalTickets = tickets.reduce((acc, v) => acc + v, 0);
        const totalFacturas = facturas.reduce((acc, v) => acc + v, 0);
        const totalGlobal = globales.reduce((acc, v) => acc + v, 0);

        const numCSV = n => n.toFixed(2).replace('.', ',');
        const SEP = ';';

        const encabezado = ['Concepto', ...nombresMeses, 'Total Año'].join(SEP);
        const filaTickets = ['Tickets', ...tickets.map(numCSV), numCSV(totalTickets)].join(SEP);
        const filaFacturas = ['Facturas', ...facturas.map(numCSV), numCSV(totalFacturas)].join(SEP);
        const filaGlobal = ['Global', ...globales.map(numCSV), numCSV(totalGlobal)].join(SEP);

        const fechaInforme = new Date();
        const timestamp = fechaInforme.toLocaleString('es-ES');
        const cabecera1 = `Año de Estadísticas${SEP}${anioSeleccionado}`;
        const cabecera2 = `Generado${SEP}${timestamp}`;
        const csv = [cabecera1, cabecera2, '', encabezado, filaTickets, filaFacturas, filaGlobal].join('\n');

        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `estadisticas_${anioSeleccionado}.csv`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    } catch (error) {
        console.error('Error generando CSV:', error);
        mostrarNotificacion('Error al generar CSV', 'error');
    }
}

// -----------------------------
//  Arrastrar modal
// -----------------------------
function initModalDrag(){
    const dialog = document.querySelector('#modal-graficos .modal-content');
    if(!dialog) return;
    let isDragging = false, startX=0, startY=0, initialLeft=0, initialTop=0;

    dialog.addEventListener('mousedown', (e)=>{
        if(e.target.classList.contains('cerrar-modal')) return; // no arrastrar al pulsar X
        isDragging = true;
        startX = e.clientX;
        startY = e.clientY;
        const rect = dialog.getBoundingClientRect();
        initialLeft = rect.left;
        initialTop = rect.top;
        dialog.style.transform = 'none'; // quitar translate para usar left/top
        dialog.style.left = `${initialLeft}px`;
        dialog.style.top = `${initialTop}px`;
        document.body.style.userSelect = 'none';
    });

    document.addEventListener('mousemove', (e)=>{
        if(!isDragging) return;
        const dx = e.clientX - startX;
        const dy = e.clientY - startY;
        dialog.style.left = `${initialLeft + dx}px`;
        dialog.style.top = `${initialTop + dy}px`;
    });

    document.addEventListener('mouseup', ()=>{
        if(isDragging){
            isDragging = false;
            document.body.style.userSelect = '';
        }
    });
}

// -----------------------------
//  Función para abrir modal de gráficos
// -----------------------------
let chartEstadisticas = null;
async function asegurarChartJs() {
    if (typeof Chart !== 'undefined') return Promise.resolve();
    return new Promise((resolve, reject)=>{
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js';
        script.onload = ()=>resolve();
        script.onerror = ()=>reject(new Error('No se pudo cargar Chart.js'));
        document.head.appendChild(script);
    });
}
async function abrirModalGraficos() {
    try {
        await asegurarChartJs();
        const { anio } = getFechaSeleccionada();
        const params = new URLSearchParams({ anio });
        params.append('t', Date.now());
        const anioAnterior = anio - 1;
        // Llamadas paralelas para año actual y anterior
        const [datosActual, datosAnterior] = await Promise.all([
            fetchConManejadorErrores('/api/ventas/total_mes?' + params.toString()),
            fetchConManejadorErrores(`/api/ventas/total_mes?anio=${anioAnterior}&t=${Date.now()}`)
        ]);

        const mesesLabels = ['Enero','Febrero','Marzo','Abril','Mayo','Junio','Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre'];
        const ticketsActual    = mesesLabels.map((_, idx) => parseFloat(datosActual.tickets[String(idx+1).padStart(2,'0')]));
        const facturasActual   = mesesLabels.map((_, idx) => parseFloat(datosActual.facturas[String(idx+1).padStart(2,'0')]));
        const globalActual     = mesesLabels.map((_, idx) => parseFloat(datosActual.global[String(idx+1).padStart(2,'0')]));
        const ticketsAnterior  = mesesLabels.map((_, idx) => parseFloat(datosAnterior.tickets[String(idx+1).padStart(2,'0')]));
        const facturasAnterior = mesesLabels.map((_, idx) => parseFloat(datosAnterior.facturas[String(idx+1).padStart(2,'0')]));
        const globalAnterior   = mesesLabels.map((_, idx) => parseFloat(datosAnterior.global[String(idx+1).padStart(2,'0')]));

        const modal = document.getElementById('modal-graficos');
        modal.style.display = 'block'; // Mostrar primero para que Chart mida tamaño
        const ctx = document.getElementById('chart-estadisticas').getContext('2d');
        if (chartEstadisticas) chartEstadisticas.destroy();
        chartEstadisticas = new Chart(ctx, {
            type: 'line',
            data: {
                labels: mesesLabels,
                datasets: [
                    // Año anterior - Total Global
                    { 
                        label: `Global ${anioAnterior}`,   
                        data: globalAnterior,   
                        backgroundColor: 'rgba(155, 89, 182, 0.3)',  
                        borderColor: 'rgba(155, 89, 182, 0.8)',  
                        borderWidth: 2, 
                        fill: false,
                        tension: 0.3
                    },
                    // Año actual - Total Global
                    { 
                        label: `Global ${anio}`,   
                        data: globalActual,   
                        backgroundColor: 'rgba(52, 152, 219, 0.7)',  
                        borderColor: 'rgba(52, 152, 219, 1)',  
                        borderWidth: 3, 
                        fill: false,
                        tension: 0.3
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    title: { display: true, text: `Ventas Global (solo totales) ${anioAnterior} vs ${anio}`},
                    tooltip: { mode: 'index', intersect: false}
                },
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });
    } catch (e) {
        console.error('Error generando gráficos', e);
        mostrarNotificacion('Error al generar gráficos', 'error');
    }
}

// Cerrar modal cuando se hace clic fuera o en X
window.addEventListener('click', function(event){
    const modal = document.getElementById('modal-graficos');
    if (event.target === modal) modal.style.display='none';
});
const cerrarModalBtn = document.getElementById('cerrar-modal');
if (cerrarModalBtn) cerrarModalBtn.addEventListener('click', () => {
    document.getElementById('modal-graficos').style.display='none';
});

// Exponer funciones globalmente por si se necesitan en otros scripts
window.cargarKpiGastos = cargarKpiGastos;
window.cargarEstadisticas = cargarEstadisticas;
window.recargarEstadisticas = recargarEstadisticas;
window.descargarCSV = descargarCSV;
